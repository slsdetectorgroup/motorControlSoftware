\section{INTERFACE Class Reference}
\label{classINTERFACE}\index{INTERFACE@{INTERFACE}}
Defines the USB objects for each connection to the controller.  


{\tt \#include $<$INTERFACE.h$>$}

\subsection*{Public Member Functions}
\begin{CompactItemize}
\item 
\bf{INTERFACE} (char $\ast$\bf{serial}, bool $\ast$success)
\item 
\bf{INTERFACE} (char $\ast$\bf{serial}, bool $\ast$success, bool xray)
\item 
char $\ast$ \bf{get\-Serial} ()
\item 
void \bf{close\_\-serialfd} ()
\item 
void \bf{print} ()
\item 
char $\ast$ \bf{send\_\-command} (char $\ast$c, int rb)
\item 
char $\ast$ \bf{send\_\-command\_\-to\_\-tube} (char $\ast$c, int rb, int \&value, int \&value2)
\end{CompactItemize}
\subsection*{Private Attributes}
\begin{CompactItemize}
\item 
char \bf{serial} [200]
\item 
int \bf{serialfd}
\item 
termios \bf{new\_\-serial\_\-conf}
\end{CompactItemize}


\subsection{Detailed Description}
Defines the USB objects for each connection to the controller. 



\subsection{Constructor \& Destructor Documentation}
\index{INTERFACE@{INTERFACE}!INTERFACE@{INTERFACE}}
\index{INTERFACE@{INTERFACE}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}INTERFACE::INTERFACE (char $\ast$ {\em serial}, bool $\ast$ {\em success})}\label{classINTERFACE_f198a8fa67db5426c06996ad6b251393}


Constructor for USB for motors Initializes/opens the port according to the parameter.\par
 For eg. object usb0 would have '/dev/tty\-USB0' as serial \begin{Desc}
\item[Parameters:]
\begin{description}
\item[{\em serial}]specifies the port for the interface object. \item[{\em success}]becomes true if this serial port was successfully initialized \end{description}
\end{Desc}
\index{INTERFACE@{INTERFACE}!INTERFACE@{INTERFACE}}
\index{INTERFACE@{INTERFACE}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}INTERFACE::INTERFACE (char $\ast$ {\em serial}, bool $\ast$ {\em success}, bool {\em xray})}\label{classINTERFACE_5ef6bd0af4347d8eaba980261d8fd2e6}


Constructor for serial for XRay Tube Initializes/opens the port according to the parameter.\par
 In this case the serial passed would always be '/dev/tty\-S0' \begin{Desc}
\item[Parameters:]
\begin{description}
\item[{\em serial}]specifies the port for the interface object. \item[{\em success}]becomes true if this serial port was successfully initialized \item[{\em xray}]a useless variable to differentiate between the 2 constructors \end{description}
\end{Desc}


\subsection{Member Function Documentation}
\index{INTERFACE@{INTERFACE}!close_serialfd@{close\_\-serialfd}}
\index{close_serialfd@{close\_\-serialfd}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}void INTERFACE::close\_\-serialfd ()}\label{classINTERFACE_9fecff3dc644bcfb2bef9d8f9696b5aa}


closes the port of the object. \index{INTERFACE@{INTERFACE}!getSerial@{getSerial}}
\index{getSerial@{getSerial}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}char $\ast$ INTERFACE::get\-Serial ()}\label{classINTERFACE_80ea681ae2912d23da3b9a7215f9231f}


gets the port of the object. \begin{Desc}
\item[Returns:]the port \end{Desc}
\index{INTERFACE@{INTERFACE}!print@{print}}
\index{print@{print}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}void INTERFACE::print ()}\label{classINTERFACE_35b0068d852df60b2d96e107d8f33685}


For debugging - Prints out the parameters of an interface object: Serial \& Serialfd. \index{INTERFACE@{INTERFACE}!send_command@{send\_\-command}}
\index{send_command@{send\_\-command}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}char $\ast$ INTERFACE::send\_\-command (char $\ast$ {\em c}, int {\em rb})}\label{classINTERFACE_93686503f17112cd091d7f4feca381ed}


Sends the command to the controller via the port of this object. \begin{Desc}
\item[Parameters:]
\begin{description}
\item[{\em c}]the command to be sent to the contoller \item[{\em rb}]is passed as 1 if buffer needs to be read back from controller after sending command, else 0 is passed \end{description}
\end{Desc}
\begin{Desc}
\item[Returns:]buffer read from the controller. \end{Desc}
\index{INTERFACE@{INTERFACE}!send_command_to_tube@{send\_\-command\_\-to\_\-tube}}
\index{send_command_to_tube@{send\_\-command\_\-to\_\-tube}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}char $\ast$ INTERFACE::send\_\-command\_\-to\_\-tube (char $\ast$ {\em c}, int {\em rb}, int \& {\em value}, int \& {\em value2})}\label{classINTERFACE_a0722f11b261dc5c8ffb7ecdd43dcd1f}


Sends the command to the XRay\-Tube via '/dev/tty\-S0' \begin{Desc}
\item[Parameters:]
\begin{description}
\item[{\em c}]the command to be sent to the tube \item[{\em rb}]is passed as 1 if buffer needs to be read back from tube after sending command, else 0 is passed \item[{\em value}]is a pointer which points to the integer value of the buffer \item[{\em value2}]is a pointer which points to the second integer value of the buffer. for cmd gn/ga \end{description}
\end{Desc}
\begin{Desc}
\item[Returns:]the binary value of the buffer read from the controller. \end{Desc}


\subsection{Member Data Documentation}
\index{INTERFACE@{INTERFACE}!new_serial_conf@{new\_\-serial\_\-conf}}
\index{new_serial_conf@{new\_\-serial\_\-conf}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}struct termios \bf{INTERFACE::new\_\-serial\_\-conf}\hspace{0.3cm}{\tt  [private]}}\label{classINTERFACE_ccf140c79145f5f287530a7052263782}


structure needed for serial port conf \index{INTERFACE@{INTERFACE}!serial@{serial}}
\index{serial@{serial}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}char \bf{INTERFACE::serial}[200]\hspace{0.3cm}{\tt  [private]}}\label{classINTERFACE_13f627e64d8f7f6e83c88d3e158ef838}


serial port of the object. For eg. '/dev/tty\-USB0' \index{INTERFACE@{INTERFACE}!serialfd@{serialfd}}
\index{serialfd@{serialfd}!INTERFACE@{INTERFACE}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}int \bf{INTERFACE::serialfd}\hspace{0.3cm}{\tt  [private]}}\label{classINTERFACE_d3077baccd6ee1ceb05278b83d59f600}


serial port feed number returned when initializing/opening the port. 

The documentation for this class was generated from the following files:\begin{CompactItemize}
\item 
XRay\-Box\-Server/\bf{INTERFACE.h}\item 
XRay\-Box\-Server/\bf{INTERFACE.cpp}\end{CompactItemize}
